//#include <bits/stdc++.h>
#include <string>
#include <iostream>
#include <vector>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'findSubstring' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts following parameters:
 *  1. STRING s
 *  2. INTEGER k
 */
struct Node{
    bool vowel;
    char character;
    Node* next;
    bool head;
      
};

string findSubstring(string s, int k) {
    string retVal; // substring to output
    int lengthOfS = s.length()-1; // ignoring \o
    Node* head = new Node;
    head->head = true;
    int vowels = 0; // total number of vowels in substring
    Node* ptr = head; // pointer to iterate 
    if(s[0]=='a' || s[0]=='e'|| s[0]=='i'|| s[0]=='o'|| s[0]=='u'){
        head->vowel = true;
        vowels++;
        retVal.push_back(s[0]);
    } else{
        head->vowel = false;
        retVal.push_back(s[0]);
    }
    head->character = s[0];
    for(int i =1; i < k; i++ ){
        Node* temp = new Node;
        if(s[i]=='a' || s[i]=='e'|| s[i]=='i'|| s[i]=='o'|| s[i]=='u'){
            temp->vowel = true;
            vowels++;
            retVal.push_back(s[i]);
        } else{
            temp->vowel = false;
            retVal.push_back(s[i]);
        }
        temp->character = s[i];
        ptr->next = temp;
        ptr = temp;
    }
    ptr->next= head; // connecting the last node to head to make circular linked list
    ptr = head; // to save the space, only using the k nodes
    for (int i =k ; i< s.length()-1; i++){
        int tempVowels = vowels;
        
        
        /* if(s[i]=='a' || s[i]=='e'|| s[i]=='i'|| s[i]=='o'|| s[i]=='u') {tempVowels++;} 
        if(tempVowels>vowels){ */
            
        /* } */
        if(ptr->vowel){tempVowels--;}
        
        if(s[i]=='a' || s[i]=='e'|| s[i]=='i'|| s[i]=='o'|| s[i]=='u'){
            
            ptr->vowel = true;
            tempVowels++;
            
        } else{
            ptr->vowel = false;
        }
        ptr->character = s[i];
        ptr->head = false;
        ptr->next->head = true; // update the next head;
        ptr= ptr->next;
        if(tempVowels>vowels){
            //need to update the retVal and vowels
            vowels = tempVowels;
            string tempRetVal;
            for (int i =0; i < k ; i++){
                tempRetVal.push_back(ptr->character);
                ptr=ptr->next;
            }
            
            retVal = tempRetVal;
        }
    }
    if(vowels==0){
        retVal = "Not found!";
    }
    return retVal;
}

int main()
{
    string s = "";
    int k = 600;
    string result = findSubstring(s,k);

    cout << result << endl;
/*     ofstream fout(getenv("OUTPUT_PATH"));

    string s;
    getline(cin, s);

    string k_temp;
    getline(cin, k_temp);

    int k = stoi(ltrim(rtrim(k_temp)));

    string result = findSubstring(s, k);

    fout << result << "\n";

    fout.close(); */

    return 0;
}

/* string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
} */